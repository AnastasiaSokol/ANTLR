//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g 2017-12-18 12:54:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class testLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ADDOP=4;
	public const int BOOL=5;
	public const int BY=6;
	public const int CHAR=7;
	public const int CLOSEBRACKET=8;
	public const int CLOSEFIGUREBRACKET=9;
	public const int DECLAR=10;
	public const int DIGIT=11;
	public const int DO=12;
	public const int DOUBLEPOINT=13;
	public const int ELSE=14;
	public const int ENDOP=15;
	public const int EXPONENT=16;
	public const int FLOAT=17;
	public const int ID=18;
	public const int IF=19;
	public const int INITIALIZE=20;
	public const int INT=21;
	public const int LETTER=22;
	public const int LOGIC_OP=23;
	public const int MULTOP=24;
	public const int OPENBRACKET=25;
	public const int OPENFIGUREBRACKET=26;
	public const int OPSRAVN=27;
	public const int SPACE=28;
	public const int SWITCH=29;
	public const int WHILE=30;
	public const int WS=31;

    // delegates
    // delegators

	public testLexer()
	{
		OnCreated();
	}

	public testLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public testLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 1);
		TraceIn("WS", 1);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:79:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:79:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(79, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(85, 9);
			_channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 1);
			LeaveRule("WS", 1);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 2);
		TraceIn("LETTER", 2);
		try
		{
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:88:17: ( 'A' .. 'Z' | 'a' .. 'z' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
			{
			DebugLocation(88, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 2);
			LeaveRule("LETTER", 2);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 3);
		TraceIn("DIGIT", 3);
		try
		{
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:89:16: ( '0' .. '3' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
			{
			DebugLocation(89, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='3'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 3);
			LeaveRule("DIGIT", 3);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 4);
		TraceIn("ID", 4);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:90:4: ( LETTER ( DIGIT )+ LETTER )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:90:6: LETTER ( DIGIT )+ LETTER
			{
			DebugLocation(90, 6);
			mLETTER(); 
			DebugLocation(90, 13);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:90:13: ( DIGIT )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='3')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
					{
					DebugLocation(90, 13);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 22);
			mLETTER(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 4);
			LeaveRule("ID", 4);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_DECLAR();
	partial void LeaveRule_DECLAR();

	// $ANTLR start "DECLAR"
	[GrammarRule("DECLAR")]
	private void mDECLAR()
	{
		EnterRule_DECLAR();
		EnterRule("DECLAR", 5);
		TraceIn("DECLAR", 5);
		try
		{
			int _type = DECLAR;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:7: ( 'int' ( 'e' ( 'g' ( 'e' ( 'r' )? )? )? )? | 'float' | 'char' | 'bool' )
			int alt6=4;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case 'i':
				{
				alt6 = 1;
				}
				break;
			case 'f':
				{
				alt6 = 2;
				}
				break;
			case 'c':
				{
				alt6 = 3;
				}
				break;
			case 'b':
				{
				alt6 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:10: 'int' ( 'e' ( 'g' ( 'e' ( 'r' )? )? )? )?
				{
				DebugLocation(92, 10);
				Match("int"); 

				DebugLocation(92, 15);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:15: ( 'e' ( 'g' ( 'e' ( 'r' )? )? )? )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:16: 'e' ( 'g' ( 'e' ( 'r' )? )? )?
					{
					DebugLocation(92, 16);
					Match('e'); 
					DebugLocation(92, 19);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:19: ( 'g' ( 'e' ( 'r' )? )? )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0=='g'))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:20: 'g' ( 'e' ( 'r' )? )?
						{
						DebugLocation(92, 20);
						Match('g'); 
						DebugLocation(92, 23);
						// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:23: ( 'e' ( 'r' )? )?
						int alt3=2;
						try { DebugEnterSubRule(3);
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if ((LA3_0=='e'))
						{
							alt3 = 1;
						}
						} finally { DebugExitDecision(3); }
						switch (alt3)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:24: 'e' ( 'r' )?
							{
							DebugLocation(92, 24);
							Match('e'); 
							DebugLocation(92, 27);
							// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:27: ( 'r' )?
							int alt2=2;
							try { DebugEnterSubRule(2);
							try { DebugEnterDecision(2, false);
							int LA2_0 = input.LA(1);

							if ((LA2_0=='r'))
							{
								alt2 = 1;
							}
							} finally { DebugExitDecision(2); }
							switch (alt2)
							{
							case 1:
								DebugEnterAlt(1);
								// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:92:28: 'r'
								{
								DebugLocation(92, 28);
								Match('r'); 

								}
								break;

							}
							} finally { DebugExitSubRule(2); }


							}
							break;

						}
						} finally { DebugExitSubRule(3); }


						}
						break;

					}
					} finally { DebugExitSubRule(4); }


					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:93:4: 'float'
				{
				DebugLocation(93, 4);
				Match("float"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:94:4: 'char'
				{
				DebugLocation(94, 4);
				Match("char"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:95:4: 'bool'
				{
				DebugLocation(95, 4);
				Match("bool"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECLAR", 5);
			LeaveRule("DECLAR", 5);
			LeaveRule_DECLAR();
		}
	}
	// $ANTLR end "DECLAR"

	partial void EnterRule_INITIALIZE();
	partial void LeaveRule_INITIALIZE();

	// $ANTLR start "INITIALIZE"
	[GrammarRule("INITIALIZE")]
	private void mINITIALIZE()
	{
		EnterRule_INITIALIZE();
		EnterRule("INITIALIZE", 6);
		TraceIn("INITIALIZE", 6);
		try
		{
			int _type = INITIALIZE;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:97:11: ( '=' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:97:13: '='
			{
			DebugLocation(97, 13);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INITIALIZE", 6);
			LeaveRule("INITIALIZE", 6);
			LeaveRule_INITIALIZE();
		}
	}
	// $ANTLR end "INITIALIZE"

	partial void EnterRule_OPENBRACKET();
	partial void LeaveRule_OPENBRACKET();

	// $ANTLR start "OPENBRACKET"
	[GrammarRule("OPENBRACKET")]
	private void mOPENBRACKET()
	{
		EnterRule_OPENBRACKET();
		EnterRule("OPENBRACKET", 7);
		TraceIn("OPENBRACKET", 7);
		try
		{
			int _type = OPENBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:98:12: ( '(' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:98:15: '('
			{
			DebugLocation(98, 15);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENBRACKET", 7);
			LeaveRule("OPENBRACKET", 7);
			LeaveRule_OPENBRACKET();
		}
	}
	// $ANTLR end "OPENBRACKET"

	partial void EnterRule_OPENFIGUREBRACKET();
	partial void LeaveRule_OPENFIGUREBRACKET();

	// $ANTLR start "OPENFIGUREBRACKET"
	[GrammarRule("OPENFIGUREBRACKET")]
	private void mOPENFIGUREBRACKET()
	{
		EnterRule_OPENFIGUREBRACKET();
		EnterRule("OPENFIGUREBRACKET", 8);
		TraceIn("OPENFIGUREBRACKET", 8);
		try
		{
			int _type = OPENFIGUREBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:99:18: ( '{' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:99:20: '{'
			{
			DebugLocation(99, 20);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENFIGUREBRACKET", 8);
			LeaveRule("OPENFIGUREBRACKET", 8);
			LeaveRule_OPENFIGUREBRACKET();
		}
	}
	// $ANTLR end "OPENFIGUREBRACKET"

	partial void EnterRule_CLOSEBRACKET();
	partial void LeaveRule_CLOSEBRACKET();

	// $ANTLR start "CLOSEBRACKET"
	[GrammarRule("CLOSEBRACKET")]
	private void mCLOSEBRACKET()
	{
		EnterRule_CLOSEBRACKET();
		EnterRule("CLOSEBRACKET", 9);
		TraceIn("CLOSEBRACKET", 9);
		try
		{
			int _type = CLOSEBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:100:13: ( ')' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:100:16: ')'
			{
			DebugLocation(100, 16);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEBRACKET", 9);
			LeaveRule("CLOSEBRACKET", 9);
			LeaveRule_CLOSEBRACKET();
		}
	}
	// $ANTLR end "CLOSEBRACKET"

	partial void EnterRule_CLOSEFIGUREBRACKET();
	partial void LeaveRule_CLOSEFIGUREBRACKET();

	// $ANTLR start "CLOSEFIGUREBRACKET"
	[GrammarRule("CLOSEFIGUREBRACKET")]
	private void mCLOSEFIGUREBRACKET()
	{
		EnterRule_CLOSEFIGUREBRACKET();
		EnterRule("CLOSEFIGUREBRACKET", 10);
		TraceIn("CLOSEFIGUREBRACKET", 10);
		try
		{
			int _type = CLOSEFIGUREBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:101:19: ( '}' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:101:21: '}'
			{
			DebugLocation(101, 21);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEFIGUREBRACKET", 10);
			LeaveRule("CLOSEFIGUREBRACKET", 10);
			LeaveRule_CLOSEFIGUREBRACKET();
		}
	}
	// $ANTLR end "CLOSEFIGUREBRACKET"

	partial void EnterRule_ENDOP();
	partial void LeaveRule_ENDOP();

	// $ANTLR start "ENDOP"
	[GrammarRule("ENDOP")]
	private void mENDOP()
	{
		EnterRule_ENDOP();
		EnterRule("ENDOP", 11);
		TraceIn("ENDOP", 11);
		try
		{
			int _type = ENDOP;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:102:7: ( ';' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:102:10: ';'
			{
			DebugLocation(102, 10);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENDOP", 11);
			LeaveRule("ENDOP", 11);
			LeaveRule_ENDOP();
		}
	}
	// $ANTLR end "ENDOP"

	partial void EnterRule_DOUBLEPOINT();
	partial void LeaveRule_DOUBLEPOINT();

	// $ANTLR start "DOUBLEPOINT"
	[GrammarRule("DOUBLEPOINT")]
	private void mDOUBLEPOINT()
	{
		EnterRule_DOUBLEPOINT();
		EnterRule("DOUBLEPOINT", 12);
		TraceIn("DOUBLEPOINT", 12);
		try
		{
			int _type = DOUBLEPOINT;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:103:12: ( ':' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:103:14: ':'
			{
			DebugLocation(103, 14);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLEPOINT", 12);
			LeaveRule("DOUBLEPOINT", 12);
			LeaveRule_DOUBLEPOINT();
		}
	}
	// $ANTLR end "DOUBLEPOINT"

	partial void EnterRule_SPACE();
	partial void LeaveRule_SPACE();

	// $ANTLR start "SPACE"
	[GrammarRule("SPACE")]
	private void mSPACE()
	{
		EnterRule_SPACE();
		EnterRule("SPACE", 13);
		TraceIn("SPACE", 13);
		try
		{
			int _type = SPACE;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:104:7: ( ' ' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:104:9: ' '
			{
			DebugLocation(104, 9);
			Match("  "); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPACE", 13);
			LeaveRule("SPACE", 13);
			LeaveRule_SPACE();
		}
	}
	// $ANTLR end "SPACE"

	partial void EnterRule_OPSRAVN();
	partial void LeaveRule_OPSRAVN();

	// $ANTLR start "OPSRAVN"
	[GrammarRule("OPSRAVN")]
	private void mOPSRAVN()
	{
		EnterRule_OPSRAVN();
		EnterRule("OPSRAVN", 14);
		TraceIn("OPSRAVN", 14);
		try
		{
			int _type = OPSRAVN;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:8: ( '<' | '>' | '==' | '<=' | '>=' | '<>' )
			int alt7=6;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case '<':
				{
				switch (input.LA(2))
				{
				case '=':
					{
					alt7 = 4;
					}
					break;
				case '>':
					{
					alt7 = 6;
					}
					break;
				default:
					alt7=1;
					break;

				}

				}
				break;
			case '>':
				{
				int LA7_2 = input.LA(2);

				if ((LA7_2=='='))
				{
					alt7 = 5;
				}
				else
				{
					alt7 = 2;
				}
				}
				break;
			case '=':
				{
				alt7 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:10: '<'
				{
				DebugLocation(106, 10);
				Match('<'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:14: '>'
				{
				DebugLocation(106, 14);
				Match('>'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:18: '=='
				{
				DebugLocation(106, 18);
				Match("=="); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:23: '<='
				{
				DebugLocation(106, 23);
				Match("<="); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:28: '>='
				{
				DebugLocation(106, 28);
				Match(">="); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:106:33: '<>'
				{
				DebugLocation(106, 33);
				Match("<>"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPSRAVN", 14);
			LeaveRule("OPSRAVN", 14);
			LeaveRule_OPSRAVN();
		}
	}
	// $ANTLR end "OPSRAVN"

	partial void EnterRule_ADDOP();
	partial void LeaveRule_ADDOP();

	// $ANTLR start "ADDOP"
	[GrammarRule("ADDOP")]
	private void mADDOP()
	{
		EnterRule_ADDOP();
		EnterRule("ADDOP", 15);
		TraceIn("ADDOP", 15);
		try
		{
			int _type = ADDOP;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:107:8: ( ( '+' | '-' ) )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
			{
			DebugLocation(107, 8);
			if (input.LA(1)=='+'||input.LA(1)=='-')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ADDOP", 15);
			LeaveRule("ADDOP", 15);
			LeaveRule_ADDOP();
		}
	}
	// $ANTLR end "ADDOP"

	partial void EnterRule_MULTOP();
	partial void LeaveRule_MULTOP();

	// $ANTLR start "MULTOP"
	[GrammarRule("MULTOP")]
	private void mMULTOP()
	{
		EnterRule_MULTOP();
		EnterRule("MULTOP", 16);
		TraceIn("MULTOP", 16);
		try
		{
			int _type = MULTOP;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:108:9: ( ( '*' | '/' ) )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
			{
			DebugLocation(108, 9);
			if (input.LA(1)=='*'||input.LA(1)=='/')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTOP", 16);
			LeaveRule("MULTOP", 16);
			LeaveRule_MULTOP();
		}
	}
	// $ANTLR end "MULTOP"

	partial void EnterRule_LOGIC_OP();
	partial void LeaveRule_LOGIC_OP();

	// $ANTLR start "LOGIC_OP"
	[GrammarRule("LOGIC_OP")]
	private void mLOGIC_OP()
	{
		EnterRule_LOGIC_OP();
		EnterRule("LOGIC_OP", 17);
		TraceIn("LOGIC_OP", 17);
		try
		{
			int _type = LOGIC_OP;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:109:9: ( '||' | '&&' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='|'))
			{
				alt8 = 1;
			}
			else if ((LA8_0=='&'))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:109:11: '||'
				{
				DebugLocation(109, 11);
				Match("||"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:109:16: '&&'
				{
				DebugLocation(109, 16);
				Match("&&"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGIC_OP", 17);
			LeaveRule("LOGIC_OP", 17);
			LeaveRule_LOGIC_OP();
		}
	}
	// $ANTLR end "LOGIC_OP"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 18);
		TraceIn("WHILE", 18);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:112:7: ( 'while' | 'WHILE' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='w'))
			{
				alt9 = 1;
			}
			else if ((LA9_0=='W'))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:112:10: 'while'
				{
				DebugLocation(112, 10);
				Match("while"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:112:18: 'WHILE'
				{
				DebugLocation(112, 18);
				Match("WHILE"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 18);
			LeaveRule("WHILE", 18);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 19);
		TraceIn("DO", 19);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:113:4: ( 'do' | 'DO' )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='d'))
			{
				alt10 = 1;
			}
			else if ((LA10_0=='D'))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:113:6: 'do'
				{
				DebugLocation(113, 6);
				Match("do"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:113:11: 'DO'
				{
				DebugLocation(113, 11);
				Match("DO"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 19);
			LeaveRule("DO", 19);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 20);
		TraceIn("IF", 20);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:114:4: ( 'if ' | 'IF ' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0=='i'))
			{
				alt11 = 1;
			}
			else if ((LA11_0=='I'))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:114:6: 'if '
				{
				DebugLocation(114, 6);
				Match("if "); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:114:12: 'IF '
				{
				DebugLocation(114, 12);
				Match("IF "); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 20);
			LeaveRule("IF", 20);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 21);
		TraceIn("ELSE", 21);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:115:7: ( 'else' | 'ELSE' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0=='e'))
			{
				alt12 = 1;
			}
			else if ((LA12_0=='E'))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:115:9: 'else'
				{
				DebugLocation(115, 9);
				Match("else"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:115:16: 'ELSE'
				{
				DebugLocation(115, 16);
				Match("ELSE"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 21);
			LeaveRule("ELSE", 21);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_SWITCH();
	partial void LeaveRule_SWITCH();

	// $ANTLR start "SWITCH"
	[GrammarRule("SWITCH")]
	private void mSWITCH()
	{
		EnterRule_SWITCH();
		EnterRule("SWITCH", 22);
		TraceIn("SWITCH", 22);
		try
		{
			int _type = SWITCH;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:116:8: ( 'switch ' | 'SWITCH ' )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0=='s'))
			{
				alt13 = 1;
			}
			else if ((LA13_0=='S'))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:116:10: 'switch '
				{
				DebugLocation(116, 10);
				Match("switch "); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:116:20: 'SWITCH '
				{
				DebugLocation(116, 20);
				Match("SWITCH "); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SWITCH", 22);
			LeaveRule("SWITCH", 22);
			LeaveRule_SWITCH();
		}
	}
	// $ANTLR end "SWITCH"

	partial void EnterRule_BY();
	partial void LeaveRule_BY();

	// $ANTLR start "BY"
	[GrammarRule("BY")]
	private void mBY()
	{
		EnterRule_BY();
		EnterRule("BY", 23);
		TraceIn("BY", 23);
		try
		{
			int _type = BY;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:117:4: ( 'by ' | 'BY ' )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0=='b'))
			{
				alt14 = 1;
			}
			else if ((LA14_0=='B'))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:117:6: 'by '
				{
				DebugLocation(117, 6);
				Match("by "); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:117:12: 'BY '
				{
				DebugLocation(117, 12);
				Match("BY "); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BY", 23);
			LeaveRule("BY", 23);
			LeaveRule_BY();
		}
	}
	// $ANTLR end "BY"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 24);
		TraceIn("INT", 24);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:119:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:119:7: ( DIGIT )+
			{
			DebugLocation(119, 7);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:119:7: ( DIGIT )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if (((LA15_0>='0' && LA15_0<='3')))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
					{
					DebugLocation(119, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 24);
			LeaveRule("INT", 24);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 25);
		TraceIn("FLOAT", 25);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:9: ( ( DIGIT )+ ( '.' ( DIGIT )+ EXPONENT )? )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:11: ( DIGIT )+ ( '.' ( DIGIT )+ EXPONENT )?
			{
			DebugLocation(120, 11);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:11: ( DIGIT )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if (((LA16_0>='0' && LA16_0<='3')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
					{
					DebugLocation(120, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(120, 18);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:18: ( '.' ( DIGIT )+ EXPONENT )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0=='.'))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:19: '.' ( DIGIT )+ EXPONENT
				{
				DebugLocation(120, 19);
				Match('.'); 
				DebugLocation(120, 23);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:120:23: ( DIGIT )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if (((LA17_0>='0' && LA17_0<='3')))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
						{
						DebugLocation(120, 23);
						input.Consume();


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(120, 30);
				mEXPONENT(); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 25);
			LeaveRule("FLOAT", 25);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 26);
		TraceIn("EXPONENT", 26);
		try
		{
			int _type = EXPONENT;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:122:9: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:122:11: ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+
			{
			DebugLocation(122, 11);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(122, 21);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:122:21: ( '+' | '-' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0=='+'||LA19_0=='-'))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
				{
				DebugLocation(122, 21);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(122, 32);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:122:32: ( DIGIT )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if (((LA20_0>='0' && LA20_0<='3')))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:
					{
					DebugLocation(122, 32);
					input.Consume();


					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPONENT", 26);
			LeaveRule("EXPONENT", 26);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 27);
		TraceIn("CHAR", 27);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:123:9: ( '\"' LETTER '\"' )
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:123:11: '\"' LETTER '\"'
			{
			DebugLocation(123, 11);
			Match('\"'); 
			DebugLocation(123, 15);
			mLETTER(); 
			DebugLocation(123, 22);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 27);
			LeaveRule("CHAR", 27);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_BOOL();
	partial void LeaveRule_BOOL();

	// $ANTLR start "BOOL"
	[GrammarRule("BOOL")]
	private void mBOOL()
	{
		EnterRule_BOOL();
		EnterRule("BOOL", 28);
		TraceIn("BOOL", 28);
		try
		{
			int _type = BOOL;
			int _channel = DefaultTokenChannel;
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:124:6: ( 'true' | 'false' )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0=='t'))
			{
				alt21 = 1;
			}
			else if ((LA21_0=='f'))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:124:8: 'true'
				{
				DebugLocation(124, 8);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:124:15: 'false'
				{
				DebugLocation(124, 15);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL", 28);
			LeaveRule("BOOL", 28);
			LeaveRule_BOOL();
		}
	}
	// $ANTLR end "BOOL"

	public override void mTokens()
	{
		// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:8: ( WS | ID | DECLAR | INITIALIZE | OPENBRACKET | OPENFIGUREBRACKET | CLOSEBRACKET | CLOSEFIGUREBRACKET | ENDOP | DOUBLEPOINT | SPACE | OPSRAVN | ADDOP | MULTOP | LOGIC_OP | WHILE | DO | IF | ELSE | SWITCH | BY | INT | FLOAT | EXPONENT | CHAR | BOOL )
		int alt22=26;
		try { DebugEnterDecision(22, false);
		try
		{
			alt22 = dfa22.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(22); }
		switch (alt22)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:10: WS
			{
			DebugLocation(1, 10);
			mWS(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:13: ID
			{
			DebugLocation(1, 13);
			mID(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:16: DECLAR
			{
			DebugLocation(1, 16);
			mDECLAR(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:23: INITIALIZE
			{
			DebugLocation(1, 23);
			mINITIALIZE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:34: OPENBRACKET
			{
			DebugLocation(1, 34);
			mOPENBRACKET(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:46: OPENFIGUREBRACKET
			{
			DebugLocation(1, 46);
			mOPENFIGUREBRACKET(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:64: CLOSEBRACKET
			{
			DebugLocation(1, 64);
			mCLOSEBRACKET(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:77: CLOSEFIGUREBRACKET
			{
			DebugLocation(1, 77);
			mCLOSEFIGUREBRACKET(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:96: ENDOP
			{
			DebugLocation(1, 96);
			mENDOP(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:102: DOUBLEPOINT
			{
			DebugLocation(1, 102);
			mDOUBLEPOINT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:114: SPACE
			{
			DebugLocation(1, 114);
			mSPACE(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:120: OPSRAVN
			{
			DebugLocation(1, 120);
			mOPSRAVN(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:128: ADDOP
			{
			DebugLocation(1, 128);
			mADDOP(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:134: MULTOP
			{
			DebugLocation(1, 134);
			mMULTOP(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:141: LOGIC_OP
			{
			DebugLocation(1, 141);
			mLOGIC_OP(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:150: WHILE
			{
			DebugLocation(1, 150);
			mWHILE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:156: DO
			{
			DebugLocation(1, 156);
			mDO(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:159: IF
			{
			DebugLocation(1, 159);
			mIF(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:162: ELSE
			{
			DebugLocation(1, 162);
			mELSE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:167: SWITCH
			{
			DebugLocation(1, 167);
			mSWITCH(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:174: BY
			{
			DebugLocation(1, 174);
			mBY(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:177: INT
			{
			DebugLocation(1, 177);
			mINT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:181: FLOAT
			{
			DebugLocation(1, 181);
			mFLOAT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:187: EXPONENT
			{
			DebugLocation(1, 187);
			mEXPONENT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:196: CHAR
			{
			DebugLocation(1, 196);
			mCHAR(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\1 NDATA(05.07.16)\\!_SOKOLOVA_!\\!_SEMESTR_7!\\LABS\\TIPS\\курсоваяANTLR_Соколова\\test.g:1:201: BOOL
			{
			DebugLocation(1, 201);
			mBOOL(); 

			}
			break;

		}

	}


	#region DFA
	DFA22 dfa22;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa22 = new DFA22(this);
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x1\xFFFF\x1\xE\x5\xFFFF\x1\x26\x15\xFFFF\x1\x2C\xB\xFFFF\x1\x2A\x4\xFFFF";
		private const string DFA22_eofS =
			"\x2E\xFFFF";
		private const string DFA22_minS =
			"\x1\x9\x1\x20\x5\x30\x1\x3D\xB\xFFFF\x4\x30\x2\x2B\x4\x30\x1\x2E\xB\xFFFF"+
			"\x1\x30\x4\xFFFF";
		private const string DFA22_maxS =
			"\x1\x7D\x1\x20\x1\x6E\x1\x6C\x1\x68\x1\x79\x1\x68\x1\x3D\xB\xFFFF\x1"+
			"\x48\x1\x6F\x1\x4F\x1\x46\x1\x6C\x1\x4C\x1\x77\x1\x57\x1\x59\x1\x72\x1"+
			"\x33\xB\xFFFF\x1\x7A\x4\xFFFF";
		private const string DFA22_acceptS =
			"\x8\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\x1\x1\xC\x1\xD\x1\xE"+
			"\x1\xF\xB\xFFFF\x1\x19\x1\x2\x1\xB\x1\x3\x1\x12\x1\x1A\x1\x15\x1\x10"+
			"\x1\x4\x1\x11\x1\x13\x1\xFFFF\x1\x18\x1\x14\x1\x16\x1\x17";
		private const string DFA22_specialS =
			"\x2E\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x2\xE\x2\xFFFF\x1\xE\x12\xFFFF\x1\x1\x1\xFFFF\x1\x1E\x3\xFFFF\x1\x12"+
				"\x1\xFFFF\x1\x8\x1\xA\x1\x11\x1\x10\x1\xFFFF\x1\x10\x1\xFFFF\x1\x11"+
				"\x4\x1D\x6\xFFFF\x1\xD\x1\xC\x1\xF\x1\x7\x1\xF\x2\xFFFF\x1\x1F\x1\x1B"+
				"\x1\x1F\x1\x15\x1\x18\x3\x1F\x1\x16\x9\x1F\x1\x1A\x3\x1F\x1\x13\x3\x1F"+
				"\x6\xFFFF\x1\x1F\x1\x5\x1\x4\x1\x14\x1\x17\x1\x3\x2\x1F\x1\x2\x9\x1F"+
				"\x1\x19\x1\x1C\x2\x1F\x1\x6\x3\x1F\x1\x9\x1\x12\x1\xB",
				"\x1\x20",
				"\x4\x1F\x32\xFFFF\x1\x22\x7\xFFFF\x1\x21",
				"\x4\x1F\x2D\xFFFF\x1\x23\xA\xFFFF\x1\x21",
				"\x4\x1F\x34\xFFFF\x1\x21",
				"\x4\x1F\x3B\xFFFF\x1\x21\x9\xFFFF\x1\x24",
				"\x4\x1F\x34\xFFFF\x1\x25",
				"\x1\xF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x4\x1F\x14\xFFFF\x1\x25",
				"\x4\x1F\x3B\xFFFF\x1\x27",
				"\x4\x1F\x1B\xFFFF\x1\x27",
				"\x4\x1F\x12\xFFFF\x1\x22",
				"\x1\x2A\x1\xFFFF\x1\x2A\x2\xFFFF\x4\x29\x38\xFFFF\x1\x28",
				"\x1\x2A\x1\xFFFF\x1\x2A\x2\xFFFF\x4\x29\x18\xFFFF\x1\x28",
				"\x4\x1F\x43\xFFFF\x1\x2B",
				"\x4\x1F\x23\xFFFF\x1\x2B",
				"\x4\x1F\x25\xFFFF\x1\x24",
				"\x4\x1F\x3E\xFFFF\x1\x23",
				"\x1\x2D\x1\xFFFF\x4\x1D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x4\x29\xD\xFFFF\x1A\x1F\x6\xFFFF\x1A\x1F",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( WS | ID | DECLAR | INITIALIZE | OPENBRACKET | OPENFIGUREBRACKET | CLOSEBRACKET | CLOSEFIGUREBRACKET | ENDOP | DOUBLEPOINT | SPACE | OPSRAVN | ADDOP | MULTOP | LOGIC_OP | WHILE | DO | IF | ELSE | SWITCH | BY | INT | FLOAT | EXPONENT | CHAR | BOOL );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
